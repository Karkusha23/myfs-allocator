#pragma once
#include <new>
#include <string>
#include <exception>

// Аллокатор разделяет выданную область на участки, размер которых в байтах кратен 8, за исключением, возможно, последнего, если размер области не кратен 8
// Первые 16 байтов области отведены под заголовок области - первые 8 байтов содержат количество выделенных участков, следующие 8 - адрес начала заголовка первого участка
// Участок состоит из заголовка - 8 байтов адреса на следующий блок, 8 байтов количества байт пользовательских данных на участке - и пользовательских данных

class Allocator
{
private:
	// Указатель на выделенную область как массив байтов
	unsigned char* memByte_;
	// Указатель на выделенную область как массив 64-битных целых чисел
	size_t* memLong_;
	// Размер выделенной области в байтах
	size_t sizeByte_; 
	// Поиск свободного места под участок размером bytesCount байтов
	// Возвращает указатель на начало заголовка предполагаемого участка, или nullptr, если память выделить нельзя
	// Записывает в prev и next адреса начал заголовков двух соседних участков
	// Если участок крайний левый, в prev записывается адрес ячейки заголовка области
	// Если участок крайний правый, в next записывается nullptr
	size_t* findFree_(size_t bytesCount, size_t*& prev, size_t*& next) const; 
	// Возвращает результат деления числа на 8 с округлением вверх
	static size_t getLongCount_(size_t bytesCount);
public:
	Allocator(void* mem, size_t totalBytes);
	void* allocate(size_t numBytes);
	void deallocate(void* ptr);
	// Возвращает байтовый битмап
	std::string bitmap() const;
	// Возвращает битмап блоками по 8 байт
	std::string shortBitmap() const; 
};